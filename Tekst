/**
 * Reprezentuje książkę adresową lub kolekcję użytkowników.
 */
class UserCollection {
    constructor() {
        this.users = [];
    }

    /**
     * Dodaje nowego użytkownika do kolekcji.
     * @param {string} name - Imię użytkownika.
     * @param {number} age - Wiek użytkownika.
     * @param {number} id - Identyfikator użytkownika.
     */
    addUser(name, age, id) {
        const user = { name, age, id };
        this.users.push(user);
    }

    /**
     * Wyświetla wszystkich użytkowników w konsoli.
     * Używa pętli for...of dla lepszej czytelności.
     */
    displayUsers() {
        console.log("Registered Users:");
        if (this.users.length === 0) {
            console.log("No users in the collection.");
            return;
        }
        for (const user of this.users) {
            console.log(`- Name: ${user.name}, Age: ${user.age}, ID: ${user.id}`);
        }
    }

    /**
     * Znajduje użytkowników po imieniu.
     * @param {string} name - Imię użytkownika do wyszukania.
     * @returns {Array<Object>} Tablica użytkowników pasujących do podanego imienia.
     */
    findUsersByName(name) {
        return this.users.filter(user => user.name.toLowerCase() === name.toLowerCase());
    }
}

// Przykład użycia klasy UserCollection
const userCollection = new UserCollection();
userCollection.addUser("Bob", 21, 122334);
userCollection.addUser("Alice", 25, 987654);
userCollection.addUser("bob", 30, 567890); // Dodajemy drugiego Boba dla testu wyszukiwania
userCollection.displayUsers();

console.log("\nFinding users named 'bob':");
const bobs = userCollection.findUsersByName("bob");
if (bobs.length > 0) {
    bobs.forEach(bob => console.log(`- Found: Name: ${bob.name}, Age: ${bob.age}, ID: ${bob.id}`));
} else {
    console.log("No users found with that name.");
}


/**
 * Kapitalizuje pierwszą literę każdego słowa w podanym ciągu tekstowym.
 * @param {string} text - Ciąg tekstowy do sformatowania.
 * @returns {string} Sformatowany ciąg tekstowy.
 */
function capitalizeWords(text) {
    if (!text || typeof text !== 'string') {
        console.warn("capitalizeWords: Input must be a non-empty string.");
        return ""; // Lub rzuć błąd, w zależności od wymagań
    }
    return text
        .trim() // Usuwa białe znaki z początku i końca
        .split(" ")
        .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()) // Kapitalizuje pierwszą literę, reszta małymi
        .join(" ");
}

console.log("\nCapitalizing text:");
const originalText = "hello world example";
const capitalizedText = capitalizeWords(originalText);
console.log(`Original: "${originalText}"`);
console.log(`Capitalized: "${capitalizedText}"`);
console.log(capitalizeWords("  another   example with  extra spaces  ")); // Test z dodatkowymi spacjami
console.log(capitalizeWords("SINGLE")); // Test z jednym słowem
console.log(capitalizeWords("")); // Test z pustym stringiem


/**
 * Generuje losowy ciąg znaków o podanej długości.
 * @param {number} length - Długość losowego ciągu znaków.
 * @returns {string} Wygenerowany losowy ciąg znaków.
 */
function generateRandomString(length) {
    if (typeof length !== 'number' || length <= 0) {
        console.warn("generateRandomString: Length must be a positive number.");
        return ""; // Lub rzuć błąd
    }
    const characters = "abcdefghijklmnopqrstuvwxyz0123456789";
    let result = "";
    const charactersLength = characters.length;

    for (let i = 0; i < length; i++) {
        const randomIndex = Math.floor(Math.random() * charactersLength);
        result += characters.charAt(randomIndex);
    }
    return result;
}

console.log("\nGenerating random strings:");
const randomString1 = generateRandomString(10);
console.log(`Random string (10 chars): "${randomString1}"`);

const randomString2 = generateRandomString(5);
console.log(`Random string (5 chars): "${randomString2}"`);

console.log(generateRandomString(0)); // Test z nieprawidłową długością
